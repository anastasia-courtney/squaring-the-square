<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="11456"><g><title>Squaring-The-Square`DYLD-STUB$$memmove (14 samples, 0.12%)</title><rect x="0.2095%" y="261" width="0.1222%" height="15" fill="rgb(227,0,7)" fg:x="24" fg:w="14"/><text x="0.4595%" y="271.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="1.8069%" y="245" width="0.0175%" height="15" fill="rgb(217,0,24)" fg:x="207" fg:w="2"/><text x="2.0569%" y="255.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$malloc (5 samples, 0.04%)</title><rect x="1.8244%" y="245" width="0.0436%" height="15" fill="rgb(221,193,54)" fg:x="209" fg:w="5"/><text x="2.0744%" y="255.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$memmove (45 samples, 0.39%)</title><rect x="1.8680%" y="245" width="0.3928%" height="15" fill="rgb(248,212,6)" fg:x="214" fg:w="45"/><text x="2.1180%" y="255.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$free (17 samples, 0.15%)</title><rect x="8.5108%" y="229" width="0.1484%" height="15" fill="rgb(208,68,35)" fg:x="975" fg:w="17"/><text x="8.7608%" y="239.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$malloc (13 samples, 0.11%)</title><rect x="8.6592%" y="229" width="0.1135%" height="15" fill="rgb(232,128,0)" fg:x="992" fg:w="13"/><text x="8.9092%" y="239.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$memmove (72 samples, 0.63%)</title><rect x="8.7727%" y="229" width="0.6285%" height="15" fill="rgb(207,160,47)" fg:x="1005" fg:w="72"/><text x="9.0227%" y="239.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$free (17 samples, 0.15%)</title><rect x="25.2619%" y="213" width="0.1484%" height="15" fill="rgb(228,23,34)" fg:x="2894" fg:w="17"/><text x="25.5119%" y="223.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$malloc (15 samples, 0.13%)</title><rect x="25.4103%" y="213" width="0.1309%" height="15" fill="rgb(218,30,26)" fg:x="2911" fg:w="15"/><text x="25.6603%" y="223.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$memmove (44 samples, 0.38%)</title><rect x="25.5412%" y="213" width="0.3841%" height="15" fill="rgb(220,122,19)" fg:x="2926" fg:w="44"/><text x="25.7912%" y="223.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$free (8 samples, 0.07%)</title><rect x="45.1030%" y="197" width="0.0698%" height="15" fill="rgb(250,228,42)" fg:x="5167" fg:w="8"/><text x="45.3530%" y="207.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$malloc (5 samples, 0.04%)</title><rect x="45.1728%" y="197" width="0.0436%" height="15" fill="rgb(240,193,28)" fg:x="5175" fg:w="5"/><text x="45.4228%" y="207.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$memmove (5 samples, 0.04%)</title><rect x="45.2165%" y="197" width="0.0436%" height="15" fill="rgb(216,20,37)" fg:x="5180" fg:w="5"/><text x="45.4665%" y="207.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$free (4 samples, 0.03%)</title><rect x="56.4682%" y="181" width="0.0349%" height="15" fill="rgb(206,188,39)" fg:x="6469" fg:w="4"/><text x="56.7182%" y="191.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$malloc (3 samples, 0.03%)</title><rect x="56.5031%" y="181" width="0.0262%" height="15" fill="rgb(217,207,13)" fg:x="6473" fg:w="3"/><text x="56.7531%" y="191.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$memmove (7 samples, 0.06%)</title><rect x="56.5293%" y="181" width="0.0611%" height="15" fill="rgb(231,73,38)" fg:x="6476" fg:w="7"/><text x="56.7793%" y="191.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$malloc (4 samples, 0.03%)</title><rect x="59.5758%" y="165" width="0.0349%" height="15" fill="rgb(225,20,46)" fg:x="6825" fg:w="4"/><text x="59.8258%" y="175.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$memmove (4 samples, 0.03%)</title><rect x="59.6107%" y="165" width="0.0349%" height="15" fill="rgb(210,31,41)" fg:x="6829" fg:w="4"/><text x="59.8607%" y="175.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$memmove (3 samples, 0.03%)</title><rect x="61.5049%" y="149" width="0.0262%" height="15" fill="rgb(221,200,47)" fg:x="7046" fg:w="3"/><text x="61.7549%" y="159.50"></text></g><g><title>Squaring-The-Square`Squaring_The_Square::exhaustive::decompose (5 samples, 0.04%)</title><rect x="63.9578%" y="69" width="0.0436%" height="15" fill="rgb(226,26,5)" fg:x="7327" fg:w="5"/><text x="64.2078%" y="79.50"></text></g><g><title>Squaring-The-Square`Squaring_The_Square::exhaustive::decompose (9 samples, 0.08%)</title><rect x="63.9316%" y="85" width="0.0786%" height="15" fill="rgb(249,33,26)" fg:x="7324" fg:w="9"/><text x="64.1816%" y="95.50"></text></g><g><title>Squaring-The-Square`Squaring_The_Square::exhaustive::decompose (35 samples, 0.31%)</title><rect x="63.7395%" y="101" width="0.3055%" height="15" fill="rgb(235,183,28)" fg:x="7302" fg:w="35"/><text x="63.9895%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="64.0276%" y="85" width="0.0175%" height="15" fill="rgb(221,5,38)" fg:x="7335" fg:w="2"/><text x="64.2776%" y="95.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.04%)</title><rect x="64.0450%" y="101" width="0.0436%" height="15" fill="rgb(247,18,42)" fg:x="7337" fg:w="5"/><text x="64.2950%" y="111.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::finish_grow (4 samples, 0.03%)</title><rect x="64.0538%" y="85" width="0.0349%" height="15" fill="rgb(241,131,45)" fg:x="7338" fg:w="4"/><text x="64.3038%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.03%)</title><rect x="64.0538%" y="69" width="0.0349%" height="15" fill="rgb(249,31,29)" fg:x="7338" fg:w="4"/><text x="64.3038%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.03%)</title><rect x="64.0538%" y="53" width="0.0349%" height="15" fill="rgb(225,111,53)" fg:x="7338" fg:w="4"/><text x="64.3038%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.02%)</title><rect x="64.0712%" y="37" width="0.0175%" height="15" fill="rgb(238,160,17)" fg:x="7340" fg:w="2"/><text x="64.3212%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.03%)</title><rect x="64.0887%" y="101" width="0.0349%" height="15" fill="rgb(214,148,48)" fg:x="7342" fg:w="4"/><text x="64.3387%" y="111.50"></text></g><g><title>Squaring-The-Square`Squaring_The_Square::exhaustive::decompose (80 samples, 0.70%)</title><rect x="63.4689%" y="117" width="0.6983%" height="15" fill="rgb(232,36,49)" fg:x="7271" fg:w="80"/><text x="63.7189%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.03%)</title><rect x="64.1411%" y="101" width="0.0262%" height="15" fill="rgb(209,103,24)" fg:x="7348" fg:w="3"/><text x="64.3911%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="64.1847%" y="53" width="0.0175%" height="15" fill="rgb(229,88,8)" fg:x="7353" fg:w="2"/><text x="64.4347%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="64.2109%" y="37" width="0.0175%" height="15" fill="rgb(213,181,19)" fg:x="7356" fg:w="2"/><text x="64.4609%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (6 samples, 0.05%)</title><rect x="64.1847%" y="69" width="0.0524%" height="15" fill="rgb(254,191,54)" fg:x="7353" fg:w="6"/><text x="64.4347%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.03%)</title><rect x="64.2109%" y="53" width="0.0262%" height="15" fill="rgb(241,83,37)" fg:x="7356" fg:w="3"/><text x="64.4609%" y="63.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.08%)</title><rect x="64.1672%" y="117" width="0.0786%" height="15" fill="rgb(233,36,39)" fg:x="7351" fg:w="9"/><text x="64.4172%" y="127.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::finish_grow (9 samples, 0.08%)</title><rect x="64.1672%" y="101" width="0.0786%" height="15" fill="rgb(226,3,54)" fg:x="7351" fg:w="9"/><text x="64.4172%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.07%)</title><rect x="64.1760%" y="85" width="0.0698%" height="15" fill="rgb(245,192,40)" fg:x="7352" fg:w="8"/><text x="64.4260%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="64.2458%" y="117" width="0.0175%" height="15" fill="rgb(238,167,29)" fg:x="7360" fg:w="2"/><text x="64.4958%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="64.2633%" y="117" width="0.0175%" height="15" fill="rgb(232,182,51)" fg:x="7362" fg:w="2"/><text x="64.5133%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="64.2895%" y="117" width="0.0175%" height="15" fill="rgb(231,60,39)" fg:x="7365" fg:w="2"/><text x="64.5395%" y="127.50"></text></g><g><title>Squaring-The-Square`Squaring_The_Square::exhaustive::decompose (170 samples, 1.48%)</title><rect x="62.8841%" y="133" width="1.4839%" height="15" fill="rgb(208,69,12)" fg:x="7204" fg:w="170"/><text x="63.1341%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.05%)</title><rect x="64.3156%" y="117" width="0.0524%" height="15" fill="rgb(235,93,37)" fg:x="7368" fg:w="6"/><text x="64.5656%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="64.4466%" y="69" width="0.0262%" height="15" fill="rgb(213,116,39)" fg:x="7383" fg:w="3"/><text x="64.6966%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="64.4815%" y="53" width="0.0175%" height="15" fill="rgb(222,207,29)" fg:x="7387" fg:w="2"/><text x="64.7315%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.07%)</title><rect x="64.4378%" y="85" width="0.0698%" height="15" fill="rgb(206,96,30)" fg:x="7382" fg:w="8"/><text x="64.6878%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.03%)</title><rect x="64.4728%" y="69" width="0.0349%" height="15" fill="rgb(218,138,4)" fg:x="7386" fg:w="4"/><text x="64.7228%" y="79.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (18 samples, 0.16%)</title><rect x="64.3680%" y="133" width="0.1571%" height="15" fill="rgb(250,191,14)" fg:x="7374" fg:w="18"/><text x="64.6180%" y="143.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::finish_grow (17 samples, 0.15%)</title><rect x="64.3767%" y="117" width="0.1484%" height="15" fill="rgb(239,60,40)" fg:x="7375" fg:w="17"/><text x="64.6267%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (15 samples, 0.13%)</title><rect x="64.3942%" y="101" width="0.1309%" height="15" fill="rgb(206,27,48)" fg:x="7377" fg:w="15"/><text x="64.6442%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.02%)</title><rect x="64.5077%" y="85" width="0.0175%" height="15" fill="rgb(225,35,8)" fg:x="7390" fg:w="2"/><text x="64.7577%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (13 samples, 0.11%)</title><rect x="64.5339%" y="133" width="0.1135%" height="15" fill="rgb(250,213,24)" fg:x="7393" fg:w="13"/><text x="64.7839%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="64.6561%" y="133" width="0.0175%" height="15" fill="rgb(247,123,22)" fg:x="7407" fg:w="2"/><text x="64.9061%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="64.6823%" y="133" width="0.0349%" height="15" fill="rgb(231,138,38)" fg:x="7410" fg:w="4"/><text x="64.9323%" y="143.50"></text></g><g><title>Squaring-The-Square`Squaring_The_Square::exhaustive::decompose (369 samples, 3.22%)</title><rect x="61.5311%" y="149" width="3.2210%" height="15" fill="rgb(231,145,46)" fg:x="7049" fg:w="369"/><text x="61.7811%" y="159.50">Squ..</text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.03%)</title><rect x="64.7172%" y="133" width="0.0349%" height="15" fill="rgb(251,118,11)" fg:x="7414" fg:w="4"/><text x="64.9672%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.03%)</title><rect x="64.7783%" y="117" width="0.0262%" height="15" fill="rgb(217,147,25)" fg:x="7421" fg:w="3"/><text x="65.0283%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="64.8568%" y="85" width="0.0175%" height="15" fill="rgb(247,81,37)" fg:x="7430" fg:w="2"/><text x="65.1068%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.06%)</title><rect x="64.9005%" y="69" width="0.0611%" height="15" fill="rgb(209,12,38)" fg:x="7435" fg:w="7"/><text x="65.1505%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (11 samples, 0.10%)</title><rect x="64.8830%" y="85" width="0.0960%" height="15" fill="rgb(227,1,9)" fg:x="7433" fg:w="11"/><text x="65.1330%" y="95.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.02%)</title><rect x="64.9616%" y="69" width="0.0175%" height="15" fill="rgb(248,47,43)" fg:x="7442" fg:w="2"/><text x="65.2116%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (18 samples, 0.16%)</title><rect x="64.8394%" y="101" width="0.1571%" height="15" fill="rgb(221,10,30)" fg:x="7428" fg:w="18"/><text x="65.0894%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="64.9791%" y="85" width="0.0175%" height="15" fill="rgb(210,229,1)" fg:x="7444" fg:w="2"/><text x="65.2291%" y="95.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (29 samples, 0.25%)</title><rect x="64.7521%" y="149" width="0.2531%" height="15" fill="rgb(222,148,37)" fg:x="7418" fg:w="29"/><text x="65.0021%" y="159.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::finish_grow (26 samples, 0.23%)</title><rect x="64.7783%" y="133" width="0.2270%" height="15" fill="rgb(234,67,33)" fg:x="7421" fg:w="26"/><text x="65.0283%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (23 samples, 0.20%)</title><rect x="64.8045%" y="117" width="0.2008%" height="15" fill="rgb(247,98,35)" fg:x="7424" fg:w="23"/><text x="65.0545%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (3 samples, 0.03%)</title><rect x="65.0052%" y="149" width="0.0262%" height="15" fill="rgb(247,138,52)" fg:x="7447" fg:w="3"/><text x="65.2552%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.09%)</title><rect x="65.0314%" y="149" width="0.0873%" height="15" fill="rgb(213,79,30)" fg:x="7450" fg:w="10"/><text x="65.2814%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (14 samples, 0.12%)</title><rect x="65.1187%" y="149" width="0.1222%" height="15" fill="rgb(246,177,23)" fg:x="7460" fg:w="14"/><text x="65.3687%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.05%)</title><rect x="65.2409%" y="149" width="0.0524%" height="15" fill="rgb(230,62,27)" fg:x="7474" fg:w="6"/><text x="65.4909%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.07%)</title><rect x="65.2933%" y="149" width="0.0698%" height="15" fill="rgb(216,154,8)" fg:x="7480" fg:w="8"/><text x="65.5433%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.14%)</title><rect x="65.3719%" y="149" width="0.1397%" height="15" fill="rgb(244,35,45)" fg:x="7489" fg:w="16"/><text x="65.6219%" y="159.50"></text></g><g><title>Squaring-The-Square`Squaring_The_Square::exhaustive::decompose (680 samples, 5.94%)</title><rect x="59.6456%" y="165" width="5.9358%" height="15" fill="rgb(251,115,12)" fg:x="6833" fg:w="680"/><text x="59.8956%" y="175.50">Squaring..</text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.07%)</title><rect x="65.5115%" y="149" width="0.0698%" height="15" fill="rgb(240,54,50)" fg:x="7505" fg:w="8"/><text x="65.7615%" y="159.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$realloc (2 samples, 0.02%)</title><rect x="65.5901%" y="149" width="0.0175%" height="15" fill="rgb(233,84,52)" fg:x="7514" fg:w="2"/><text x="65.8401%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.03%)</title><rect x="65.6163%" y="133" width="0.0262%" height="15" fill="rgb(207,117,47)" fg:x="7517" fg:w="3"/><text x="65.8663%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (2 samples, 0.02%)</title><rect x="65.6861%" y="117" width="0.0175%" height="15" fill="rgb(249,43,39)" fg:x="7525" fg:w="2"/><text x="65.9361%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.05%)</title><rect x="65.7123%" y="101" width="0.0524%" height="15" fill="rgb(209,38,44)" fg:x="7528" fg:w="6"/><text x="65.9623%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.03%)</title><rect x="65.7647%" y="101" width="0.0349%" height="15" fill="rgb(236,212,23)" fg:x="7534" fg:w="4"/><text x="66.0147%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.02%)</title><rect x="65.8170%" y="85" width="0.0175%" height="15" fill="rgb(242,79,21)" fg:x="7540" fg:w="2"/><text x="66.0670%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (14 samples, 0.12%)</title><rect x="65.7996%" y="101" width="0.1222%" height="15" fill="rgb(211,96,35)" fg:x="7538" fg:w="14"/><text x="66.0496%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 0.09%)</title><rect x="65.8345%" y="85" width="0.0873%" height="15" fill="rgb(253,215,40)" fg:x="7542" fg:w="10"/><text x="66.0845%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (26 samples, 0.23%)</title><rect x="65.7036%" y="117" width="0.2270%" height="15" fill="rgb(211,81,21)" fg:x="7527" fg:w="26"/><text x="65.9536%" y="127.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::finish_grow (38 samples, 0.33%)</title><rect x="65.6075%" y="149" width="0.3317%" height="15" fill="rgb(208,190,38)" fg:x="7516" fg:w="38"/><text x="65.8575%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (34 samples, 0.30%)</title><rect x="65.6425%" y="133" width="0.2968%" height="15" fill="rgb(235,213,38)" fg:x="7520" fg:w="34"/><text x="65.8925%" y="143.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (43 samples, 0.38%)</title><rect x="65.5814%" y="165" width="0.3753%" height="15" fill="rgb(237,122,38)" fg:x="7513" fg:w="43"/><text x="65.8314%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.02%)</title><rect x="65.9392%" y="149" width="0.0175%" height="15" fill="rgb(244,218,35)" fg:x="7554" fg:w="2"/><text x="66.1892%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.02%)</title><rect x="65.9567%" y="165" width="0.0175%" height="15" fill="rgb(240,68,47)" fg:x="7556" fg:w="2"/><text x="66.2067%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.10%)</title><rect x="65.9742%" y="165" width="0.1047%" height="15" fill="rgb(210,16,53)" fg:x="7558" fg:w="12"/><text x="66.2242%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (33 samples, 0.29%)</title><rect x="66.0789%" y="165" width="0.2881%" height="15" fill="rgb(235,124,12)" fg:x="7570" fg:w="33"/><text x="66.3289%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.11%)</title><rect x="66.3670%" y="165" width="0.1135%" height="15" fill="rgb(224,169,11)" fg:x="7603" fg:w="13"/><text x="66.6170%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.10%)</title><rect x="66.4804%" y="165" width="0.1047%" height="15" fill="rgb(250,166,2)" fg:x="7616" fg:w="12"/><text x="66.7304%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.02%)</title><rect x="66.5852%" y="165" width="0.0175%" height="15" fill="rgb(242,216,29)" fg:x="7628" fg:w="2"/><text x="66.8352%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (36 samples, 0.31%)</title><rect x="66.6027%" y="165" width="0.3142%" height="15" fill="rgb(230,116,27)" fg:x="7630" fg:w="36"/><text x="66.8527%" y="175.50"></text></g><g><title>Squaring-The-Square`Squaring_The_Square::exhaustive::decompose (1,191 samples, 10.40%)</title><rect x="56.5904%" y="181" width="10.3963%" height="15" fill="rgb(228,99,48)" fg:x="6483" fg:w="1191"/><text x="56.8404%" y="191.50">Squaring-The-Sq..</text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.07%)</title><rect x="66.9169%" y="165" width="0.0698%" height="15" fill="rgb(253,11,6)" fg:x="7666" fg:w="8"/><text x="67.1669%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.06%)</title><rect x="67.0129%" y="149" width="0.0611%" height="15" fill="rgb(247,143,39)" fg:x="7677" fg:w="7"/><text x="67.2629%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.07%)</title><rect x="67.1788%" y="117" width="0.0698%" height="15" fill="rgb(236,97,10)" fg:x="7696" fg:w="8"/><text x="67.4288%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.05%)</title><rect x="67.2486%" y="117" width="0.0524%" height="15" fill="rgb(233,208,19)" fg:x="7704" fg:w="6"/><text x="67.4986%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.10%)</title><rect x="67.3621%" y="101" width="0.1047%" height="15" fill="rgb(216,164,2)" fg:x="7717" fg:w="12"/><text x="67.6121%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (22 samples, 0.19%)</title><rect x="67.3010%" y="117" width="0.1920%" height="15" fill="rgb(220,129,5)" fg:x="7710" fg:w="22"/><text x="67.5510%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.02%)</title><rect x="67.4756%" y="101" width="0.0175%" height="15" fill="rgb(242,17,10)" fg:x="7730" fg:w="2"/><text x="67.7256%" y="111.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::finish_grow (59 samples, 0.52%)</title><rect x="67.0042%" y="165" width="0.5150%" height="15" fill="rgb(242,107,0)" fg:x="7676" fg:w="59"/><text x="67.2542%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (51 samples, 0.45%)</title><rect x="67.0740%" y="149" width="0.4452%" height="15" fill="rgb(251,28,31)" fg:x="7684" fg:w="51"/><text x="67.3240%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (45 samples, 0.39%)</title><rect x="67.1264%" y="133" width="0.3928%" height="15" fill="rgb(233,223,10)" fg:x="7690" fg:w="45"/><text x="67.3764%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.03%)</title><rect x="67.4930%" y="117" width="0.0262%" height="15" fill="rgb(215,21,27)" fg:x="7732" fg:w="3"/><text x="67.7430%" y="127.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (62 samples, 0.54%)</title><rect x="66.9867%" y="181" width="0.5412%" height="15" fill="rgb(232,23,21)" fg:x="7674" fg:w="62"/><text x="67.2367%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (6 samples, 0.05%)</title><rect x="67.5367%" y="181" width="0.0524%" height="15" fill="rgb(244,5,23)" fg:x="7737" fg:w="6"/><text x="67.7867%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.10%)</title><rect x="67.5890%" y="181" width="0.1047%" height="15" fill="rgb(226,81,46)" fg:x="7743" fg:w="12"/><text x="67.8390%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (117 samples, 1.02%)</title><rect x="67.6938%" y="181" width="1.0213%" height="15" fill="rgb(247,70,30)" fg:x="7755" fg:w="117"/><text x="67.9438%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.08%)</title><rect x="68.7151%" y="181" width="0.0786%" height="15" fill="rgb(212,68,19)" fg:x="7872" fg:w="9"/><text x="68.9651%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (24 samples, 0.21%)</title><rect x="68.7936%" y="181" width="0.2095%" height="15" fill="rgb(240,187,13)" fg:x="7881" fg:w="24"/><text x="69.0436%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (5 samples, 0.04%)</title><rect x="69.0031%" y="181" width="0.0436%" height="15" fill="rgb(223,113,26)" fg:x="7905" fg:w="5"/><text x="69.2531%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (44 samples, 0.38%)</title><rect x="69.0468%" y="181" width="0.3841%" height="15" fill="rgb(206,192,2)" fg:x="7910" fg:w="44"/><text x="69.2968%" y="191.50"></text></g><g><title>Squaring-The-Square`Squaring_The_Square::exhaustive::decompose (2,794 samples, 24.39%)</title><rect x="45.2601%" y="197" width="24.3890%" height="15" fill="rgb(241,108,4)" fg:x="5185" fg:w="2794"/><text x="45.5101%" y="207.50">Squaring-The-Square`Squaring_The_Square..</text></g><g><title>libsystem_platform.dylib`_platform_memset (25 samples, 0.22%)</title><rect x="69.4309%" y="181" width="0.2182%" height="15" fill="rgb(247,173,49)" fg:x="7954" fg:w="25"/><text x="69.6809%" y="191.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$realloc (8 samples, 0.07%)</title><rect x="69.7626%" y="181" width="0.0698%" height="15" fill="rgb(224,114,35)" fg:x="7992" fg:w="8"/><text x="70.0126%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.03%)</title><rect x="69.9459%" y="165" width="0.0349%" height="15" fill="rgb(245,159,27)" fg:x="8013" fg:w="4"/><text x="70.1959%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (25 samples, 0.22%)</title><rect x="69.9808%" y="165" width="0.2182%" height="15" fill="rgb(245,172,44)" fg:x="8017" fg:w="25"/><text x="70.2308%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (5 samples, 0.04%)</title><rect x="70.5395%" y="149" width="0.0436%" height="15" fill="rgb(236,23,11)" fg:x="8081" fg:w="5"/><text x="70.7895%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (6 samples, 0.05%)</title><rect x="70.7490%" y="133" width="0.0524%" height="15" fill="rgb(205,117,38)" fg:x="8105" fg:w="6"/><text x="70.9990%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 0.09%)</title><rect x="70.8013%" y="133" width="0.0873%" height="15" fill="rgb(237,72,25)" fg:x="8111" fg:w="10"/><text x="71.0513%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (46 samples, 0.40%)</title><rect x="70.8886%" y="133" width="0.4015%" height="15" fill="rgb(244,70,9)" fg:x="8121" fg:w="46"/><text x="71.1386%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (37 samples, 0.32%)</title><rect x="71.2902%" y="133" width="0.3230%" height="15" fill="rgb(217,125,39)" fg:x="8167" fg:w="37"/><text x="71.5402%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (4 samples, 0.03%)</title><rect x="71.7004%" y="117" width="0.0349%" height="15" fill="rgb(235,36,10)" fg:x="8214" fg:w="4"/><text x="71.9504%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (45 samples, 0.39%)</title><rect x="71.7353%" y="117" width="0.3928%" height="15" fill="rgb(251,123,47)" fg:x="8218" fg:w="45"/><text x="71.9853%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.02%)</title><rect x="72.1281%" y="117" width="0.0175%" height="15" fill="rgb(221,13,13)" fg:x="8263" fg:w="2"/><text x="72.3781%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (62 samples, 0.54%)</title><rect x="71.6131%" y="133" width="0.5412%" height="15" fill="rgb(238,131,9)" fg:x="8204" fg:w="62"/><text x="71.8631%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (192 samples, 1.68%)</title><rect x="70.5831%" y="149" width="1.6760%" height="15" fill="rgb(211,50,8)" fg:x="8086" fg:w="192"/><text x="70.8331%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.10%)</title><rect x="72.1543%" y="133" width="0.1047%" height="15" fill="rgb(245,182,24)" fg:x="8266" fg:w="12"/><text x="72.4043%" y="143.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::finish_grow (283 samples, 2.47%)</title><rect x="69.8324%" y="181" width="2.4703%" height="15" fill="rgb(242,14,37)" fg:x="8000" fg:w="283"/><text x="70.0824%" y="191.50">Sq..</text></g><g><title>libsystem_malloc.dylib`realloc (241 samples, 2.10%)</title><rect x="70.1990%" y="165" width="2.1037%" height="15" fill="rgb(246,228,12)" fg:x="8042" fg:w="241"/><text x="70.4490%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (5 samples, 0.04%)</title><rect x="72.2591%" y="149" width="0.0436%" height="15" fill="rgb(213,55,15)" fg:x="8278" fg:w="5"/><text x="72.5091%" y="159.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (311 samples, 2.71%)</title><rect x="69.6491%" y="197" width="2.7147%" height="15" fill="rgb(209,9,3)" fg:x="7979" fg:w="311"/><text x="69.8991%" y="207.50">Sq..</text></g><g><title>libsystem_malloc.dylib`realloc (7 samples, 0.06%)</title><rect x="72.3027%" y="181" width="0.0611%" height="15" fill="rgb(230,59,30)" fg:x="8283" fg:w="7"/><text x="72.5527%" y="191.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::finish_grow (5 samples, 0.04%)</title><rect x="72.3638%" y="197" width="0.0436%" height="15" fill="rgb(209,121,21)" fg:x="8290" fg:w="5"/><text x="72.6138%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (11 samples, 0.10%)</title><rect x="72.4075%" y="197" width="0.0960%" height="15" fill="rgb(220,109,13)" fg:x="8295" fg:w="11"/><text x="72.6575%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (53 samples, 0.46%)</title><rect x="72.5035%" y="197" width="0.4626%" height="15" fill="rgb(232,18,1)" fg:x="8306" fg:w="53"/><text x="72.7535%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (204 samples, 1.78%)</title><rect x="72.9661%" y="197" width="1.7807%" height="15" fill="rgb(215,41,42)" fg:x="8359" fg:w="204"/><text x="73.2161%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`free (73 samples, 0.64%)</title><rect x="74.7469%" y="197" width="0.6372%" height="15" fill="rgb(224,123,36)" fg:x="8563" fg:w="73"/><text x="74.9969%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (102 samples, 0.89%)</title><rect x="75.3841%" y="197" width="0.8904%" height="15" fill="rgb(240,125,3)" fg:x="8636" fg:w="102"/><text x="75.6341%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (12 samples, 0.10%)</title><rect x="76.2744%" y="197" width="0.1047%" height="15" fill="rgb(205,98,50)" fg:x="8738" fg:w="12"/><text x="76.5244%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (45 samples, 0.39%)</title><rect x="76.3792%" y="197" width="0.3928%" height="15" fill="rgb(205,185,37)" fg:x="8750" fg:w="45"/><text x="76.6292%" y="207.50"></text></g><g><title>Squaring-The-Square`Squaring_The_Square::exhaustive::decompose (5,851 samples, 51.07%)</title><rect x="25.9253%" y="213" width="51.0737%" height="15" fill="rgb(238,207,15)" fg:x="2970" fg:w="5851"/><text x="26.1753%" y="223.50">Squaring-The-Square`Squaring_The_Square::exhaustive::decompose</text></g><g><title>libsystem_platform.dylib`_platform_memset (26 samples, 0.23%)</title><rect x="76.7720%" y="197" width="0.2270%" height="15" fill="rgb(213,199,42)" fg:x="8795" fg:w="26"/><text x="77.0220%" y="207.50"></text></g><g><title>Squaring-The-Square`DYLD-STUB$$realloc (9 samples, 0.08%)</title><rect x="77.2259%" y="197" width="0.0786%" height="15" fill="rgb(235,201,11)" fg:x="8847" fg:w="9"/><text x="77.4759%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.07%)</title><rect x="77.4179%" y="181" width="0.0698%" height="15" fill="rgb(207,46,11)" fg:x="8869" fg:w="8"/><text x="77.6679%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (29 samples, 0.25%)</title><rect x="77.4878%" y="181" width="0.2531%" height="15" fill="rgb(241,35,35)" fg:x="8877" fg:w="29"/><text x="77.7378%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (7 samples, 0.06%)</title><rect x="78.2385%" y="165" width="0.0611%" height="15" fill="rgb(243,32,47)" fg:x="8963" fg:w="7"/><text x="78.4885%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (5 samples, 0.04%)</title><rect x="78.5440%" y="149" width="0.0436%" height="15" fill="rgb(247,202,23)" fg:x="8998" fg:w="5"/><text x="78.7940%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.04%)</title><rect x="78.5876%" y="149" width="0.0436%" height="15" fill="rgb(219,102,11)" fg:x="9003" fg:w="5"/><text x="78.8376%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (57 samples, 0.50%)</title><rect x="78.6313%" y="149" width="0.4976%" height="15" fill="rgb(243,110,44)" fg:x="9008" fg:w="57"/><text x="78.8813%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (42 samples, 0.37%)</title><rect x="79.1288%" y="149" width="0.3666%" height="15" fill="rgb(222,74,54)" fg:x="9065" fg:w="42"/><text x="79.3788%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (4 samples, 0.03%)</title><rect x="79.6089%" y="133" width="0.0349%" height="15" fill="rgb(216,99,12)" fg:x="9120" fg:w="4"/><text x="79.8589%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (79 samples, 0.69%)</title><rect x="79.6439%" y="133" width="0.6896%" height="15" fill="rgb(226,22,26)" fg:x="9124" fg:w="79"/><text x="79.8939%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (102 samples, 0.89%)</title><rect x="79.4955%" y="149" width="0.8904%" height="15" fill="rgb(217,163,10)" fg:x="9107" fg:w="102"/><text x="79.7455%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (6 samples, 0.05%)</title><rect x="80.3334%" y="133" width="0.0524%" height="15" fill="rgb(213,25,53)" fg:x="9203" fg:w="6"/><text x="80.5834%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (254 samples, 2.22%)</title><rect x="78.2996%" y="165" width="2.2172%" height="15" fill="rgb(252,105,26)" fg:x="8970" fg:w="254"/><text x="78.5496%" y="175.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.13%)</title><rect x="80.3858%" y="149" width="0.1309%" height="15" fill="rgb(220,39,43)" fg:x="9209" fg:w="15"/><text x="80.6358%" y="159.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::finish_grow (384 samples, 3.35%)</title><rect x="77.3045%" y="197" width="3.3520%" height="15" fill="rgb(229,68,48)" fg:x="8856" fg:w="384"/><text x="77.5545%" y="207.50">Squ..</text></g><g><title>libsystem_malloc.dylib`realloc (334 samples, 2.92%)</title><rect x="77.7409%" y="181" width="2.9155%" height="15" fill="rgb(252,8,32)" fg:x="8906" fg:w="334"/><text x="77.9909%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (16 samples, 0.14%)</title><rect x="80.5168%" y="165" width="0.1397%" height="15" fill="rgb(223,20,43)" fg:x="9224" fg:w="16"/><text x="80.7668%" y="175.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (425 samples, 3.71%)</title><rect x="76.9990%" y="213" width="3.7098%" height="15" fill="rgb(229,81,49)" fg:x="8821" fg:w="425"/><text x="77.2490%" y="223.50">Squa..</text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.05%)</title><rect x="80.6564%" y="197" width="0.0524%" height="15" fill="rgb(236,28,36)" fg:x="9240" fg:w="6"/><text x="80.9064%" y="207.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::finish_grow (8 samples, 0.07%)</title><rect x="80.7088%" y="213" width="0.0698%" height="15" fill="rgb(249,185,26)" fg:x="9246" fg:w="8"/><text x="80.9588%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (12 samples, 0.10%)</title><rect x="80.7786%" y="213" width="0.1047%" height="15" fill="rgb(249,174,33)" fg:x="9254" fg:w="12"/><text x="81.0286%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (94 samples, 0.82%)</title><rect x="80.8834%" y="213" width="0.8205%" height="15" fill="rgb(233,201,37)" fg:x="9266" fg:w="94"/><text x="81.1334%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (169 samples, 1.48%)</title><rect x="81.7039%" y="213" width="1.4752%" height="15" fill="rgb(221,78,26)" fg:x="9360" fg:w="169"/><text x="81.9539%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (119 samples, 1.04%)</title><rect x="83.1791%" y="213" width="1.0388%" height="15" fill="rgb(250,127,30)" fg:x="9529" fg:w="119"/><text x="83.4291%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (138 samples, 1.20%)</title><rect x="84.2179%" y="213" width="1.2046%" height="15" fill="rgb(230,49,44)" fg:x="9648" fg:w="138"/><text x="84.4679%" y="223.50"></text></g><g><title>libsystem_platform.dylib`__bzero (10 samples, 0.09%)</title><rect x="85.4225%" y="213" width="0.0873%" height="15" fill="rgb(229,67,23)" fg:x="9786" fg:w="10"/><text x="85.6725%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (234 samples, 2.04%)</title><rect x="85.5098%" y="213" width="2.0426%" height="15" fill="rgb(249,83,47)" fg:x="9796" fg:w="234"/><text x="85.7598%" y="223.50">l..</text></g><g><title>Squaring-The-Square`Squaring_The_Square::exhaustive::decompose (8,977 samples, 78.36%)</title><rect x="9.4012%" y="229" width="78.3607%" height="15" fill="rgb(215,43,3)" fg:x="1077" fg:w="8977"/><text x="9.6512%" y="239.50">Squaring-The-Square`Squaring_The_Square::exhaustive::decompose</text></g><g><title>libsystem_platform.dylib`_platform_memset (24 samples, 0.21%)</title><rect x="87.5524%" y="213" width="0.2095%" height="15" fill="rgb(238,154,13)" fg:x="10030" fg:w="24"/><text x="87.8024%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (20 samples, 0.17%)</title><rect x="88.0412%" y="197" width="0.1746%" height="15" fill="rgb(219,56,2)" fg:x="10086" fg:w="20"/><text x="88.2912%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (11 samples, 0.10%)</title><rect x="88.4166%" y="181" width="0.0960%" height="15" fill="rgb(233,0,4)" fg:x="10129" fg:w="11"/><text x="88.6666%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (7 samples, 0.06%)</title><rect x="88.6435%" y="165" width="0.0611%" height="15" fill="rgb(235,30,7)" fg:x="10155" fg:w="7"/><text x="88.8935%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.08%)</title><rect x="88.7046%" y="165" width="0.0786%" height="15" fill="rgb(250,79,13)" fg:x="10162" fg:w="9"/><text x="88.9546%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (34 samples, 0.30%)</title><rect x="88.7832%" y="165" width="0.2968%" height="15" fill="rgb(211,146,34)" fg:x="10171" fg:w="34"/><text x="89.0332%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (25 samples, 0.22%)</title><rect x="89.0800%" y="165" width="0.2182%" height="15" fill="rgb(228,22,38)" fg:x="10205" fg:w="25"/><text x="89.3300%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (3 samples, 0.03%)</title><rect x="89.3506%" y="149" width="0.0262%" height="15" fill="rgb(235,168,5)" fg:x="10236" fg:w="3"/><text x="89.6006%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (38 samples, 0.33%)</title><rect x="89.3767%" y="149" width="0.3317%" height="15" fill="rgb(221,155,16)" fg:x="10239" fg:w="38"/><text x="89.6267%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (53 samples, 0.46%)</title><rect x="89.2982%" y="165" width="0.4626%" height="15" fill="rgb(215,215,53)" fg:x="10230" fg:w="53"/><text x="89.5482%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (5 samples, 0.04%)</title><rect x="89.7172%" y="149" width="0.0436%" height="15" fill="rgb(223,4,10)" fg:x="10278" fg:w="5"/><text x="89.9672%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (148 samples, 1.29%)</title><rect x="88.5126%" y="181" width="1.2919%" height="15" fill="rgb(234,103,6)" fg:x="10140" fg:w="148"/><text x="88.7626%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.04%)</title><rect x="89.7608%" y="165" width="0.0436%" height="15" fill="rgb(227,97,0)" fg:x="10283" fg:w="5"/><text x="90.0108%" y="175.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::finish_grow (215 samples, 1.88%)</title><rect x="87.9888%" y="213" width="1.8767%" height="15" fill="rgb(234,150,53)" fg:x="10080" fg:w="215"/><text x="88.2388%" y="223.50">S..</text></g><g><title>libsystem_malloc.dylib`realloc (189 samples, 1.65%)</title><rect x="88.2158%" y="197" width="1.6498%" height="15" fill="rgb(228,201,54)" fg:x="10106" fg:w="189"/><text x="88.4658%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.06%)</title><rect x="89.8045%" y="181" width="0.0611%" height="15" fill="rgb(222,22,37)" fg:x="10288" fg:w="7"/><text x="90.0545%" y="191.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (248 samples, 2.16%)</title><rect x="87.7619%" y="229" width="2.1648%" height="15" fill="rgb(237,53,32)" fg:x="10054" fg:w="248"/><text x="88.0119%" y="239.50">S..</text></g><g><title>libsystem_malloc.dylib`realloc (7 samples, 0.06%)</title><rect x="89.8656%" y="213" width="0.0611%" height="15" fill="rgb(233,25,53)" fg:x="10295" fg:w="7"/><text x="90.1156%" y="223.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="89.9267%" y="229" width="0.0262%" height="15" fill="rgb(210,40,34)" fg:x="10302" fg:w="3"/><text x="90.1767%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (4 samples, 0.03%)</title><rect x="89.9529%" y="229" width="0.0349%" height="15" fill="rgb(241,220,44)" fg:x="10305" fg:w="4"/><text x="90.2029%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (73 samples, 0.64%)</title><rect x="89.9878%" y="229" width="0.6372%" height="15" fill="rgb(235,28,35)" fg:x="10309" fg:w="73"/><text x="90.2378%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (64 samples, 0.56%)</title><rect x="90.6250%" y="229" width="0.5587%" height="15" fill="rgb(210,56,17)" fg:x="10382" fg:w="64"/><text x="90.8750%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (85 samples, 0.74%)</title><rect x="91.1837%" y="229" width="0.7420%" height="15" fill="rgb(224,130,29)" fg:x="10446" fg:w="85"/><text x="91.4337%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (89 samples, 0.78%)</title><rect x="91.9256%" y="229" width="0.7769%" height="15" fill="rgb(235,212,8)" fg:x="10531" fg:w="89"/><text x="92.1756%" y="239.50"></text></g><g><title>libsystem_platform.dylib`__bzero (4 samples, 0.03%)</title><rect x="92.7025%" y="229" width="0.0349%" height="15" fill="rgb(223,33,50)" fg:x="10620" fg:w="4"/><text x="92.9525%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (335 samples, 2.92%)</title><rect x="92.7374%" y="229" width="2.9242%" height="15" fill="rgb(219,149,13)" fg:x="10624" fg:w="335"/><text x="92.9874%" y="239.50">li..</text></g><g><title>Squaring-The-Square`Squaring_The_Square::exhaustive::decompose (10,704 samples, 93.44%)</title><rect x="2.2608%" y="245" width="93.4358%" height="15" fill="rgb(250,156,29)" fg:x="259" fg:w="10704"/><text x="2.5108%" y="255.50">Squaring-The-Square`Squaring_The_Square::exhaustive::decompose</text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.03%)</title><rect x="95.6617%" y="229" width="0.0349%" height="15" fill="rgb(216,193,19)" fg:x="10959" fg:w="4"/><text x="95.9117%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.03%)</title><rect x="95.7751%" y="213" width="0.0349%" height="15" fill="rgb(216,135,14)" fg:x="10972" fg:w="4"/><text x="96.0251%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.07%)</title><rect x="95.8712%" y="181" width="0.0698%" height="15" fill="rgb(241,47,5)" fg:x="10983" fg:w="8"/><text x="96.1212%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.04%)</title><rect x="95.9410%" y="181" width="0.0436%" height="15" fill="rgb(233,42,35)" fg:x="10991" fg:w="5"/><text x="96.1910%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.08%)</title><rect x="96.0108%" y="165" width="0.0786%" height="15" fill="rgb(231,13,6)" fg:x="10999" fg:w="9"/><text x="96.2608%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (15 samples, 0.13%)</title><rect x="95.9846%" y="181" width="0.1309%" height="15" fill="rgb(207,181,40)" fg:x="10996" fg:w="15"/><text x="96.2346%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.02%)</title><rect x="96.0981%" y="165" width="0.0175%" height="15" fill="rgb(254,173,49)" fg:x="11009" fg:w="2"/><text x="96.3481%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (33 samples, 0.29%)</title><rect x="95.8450%" y="197" width="0.2881%" height="15" fill="rgb(221,1,38)" fg:x="10980" fg:w="33"/><text x="96.0950%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="96.1156%" y="181" width="0.0175%" height="15" fill="rgb(206,124,46)" fg:x="11011" fg:w="2"/><text x="96.3656%" y="191.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::finish_grow (47 samples, 0.41%)</title><rect x="95.7402%" y="229" width="0.4103%" height="15" fill="rgb(249,21,11)" fg:x="10968" fg:w="47"/><text x="95.9902%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (39 samples, 0.34%)</title><rect x="95.8101%" y="213" width="0.3404%" height="15" fill="rgb(222,201,40)" fg:x="10976" fg:w="39"/><text x="96.0601%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.02%)</title><rect x="96.1330%" y="197" width="0.0175%" height="15" fill="rgb(235,61,29)" fg:x="11013" fg:w="2"/><text x="96.3830%" y="207.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (53 samples, 0.46%)</title><rect x="95.6966%" y="245" width="0.4626%" height="15" fill="rgb(219,207,3)" fg:x="10963" fg:w="53"/><text x="95.9466%" y="255.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="96.1592%" y="245" width="0.0262%" height="15" fill="rgb(222,56,46)" fg:x="11016" fg:w="3"/><text x="96.4092%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.21%)</title><rect x="96.1941%" y="245" width="0.2095%" height="15" fill="rgb(239,76,54)" fg:x="11020" fg:w="24"/><text x="96.4441%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.08%)</title><rect x="96.4036%" y="245" width="0.0786%" height="15" fill="rgb(231,124,27)" fg:x="11044" fg:w="9"/><text x="96.6536%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (37 samples, 0.32%)</title><rect x="96.4822%" y="245" width="0.3230%" height="15" fill="rgb(249,195,6)" fg:x="11053" fg:w="37"/><text x="96.7322%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (45 samples, 0.39%)</title><rect x="96.8052%" y="245" width="0.3928%" height="15" fill="rgb(237,174,47)" fg:x="11090" fg:w="45"/><text x="97.0552%" y="255.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3 samples, 0.03%)</title><rect x="97.1980%" y="245" width="0.0262%" height="15" fill="rgb(206,201,31)" fg:x="11135" fg:w="3"/><text x="97.4480%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (197 samples, 1.72%)</title><rect x="97.2242%" y="245" width="1.7196%" height="15" fill="rgb(231,57,52)" fg:x="11138" fg:w="197"/><text x="97.4742%" y="255.50"></text></g><g><title>Squaring-The-Square`Squaring_The_Square::exhaustive::decompose (11,299 samples, 98.63%)</title><rect x="0.3317%" y="261" width="98.6295%" height="15" fill="rgb(248,177,22)" fg:x="38" fg:w="11299"/><text x="0.5817%" y="271.50">Squaring-The-Square`Squaring_The_Square::exhaustive::decompose</text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.02%)</title><rect x="98.9438%" y="245" width="0.0175%" height="15" fill="rgb(215,211,37)" fg:x="11335" fg:w="2"/><text x="99.1938%" y="255.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.07%)</title><rect x="98.9612%" y="261" width="0.0698%" height="15" fill="rgb(241,128,51)" fg:x="11337" fg:w="8"/><text x="99.2112%" y="271.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::finish_grow (8 samples, 0.07%)</title><rect x="98.9612%" y="245" width="0.0698%" height="15" fill="rgb(227,165,31)" fg:x="11337" fg:w="8"/><text x="99.2112%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.04%)</title><rect x="98.9874%" y="229" width="0.0436%" height="15" fill="rgb(228,167,24)" fg:x="11340" fg:w="5"/><text x="99.2374%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5 samples, 0.04%)</title><rect x="98.9874%" y="213" width="0.0436%" height="15" fill="rgb(228,143,12)" fg:x="11340" fg:w="5"/><text x="99.2374%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.03%)</title><rect x="99.0049%" y="197" width="0.0262%" height="15" fill="rgb(249,149,8)" fg:x="11342" fg:w="3"/><text x="99.2549%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.03%)</title><rect x="99.0398%" y="261" width="0.0262%" height="15" fill="rgb(243,35,44)" fg:x="11346" fg:w="3"/><text x="99.2898%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.04%)</title><rect x="99.0660%" y="261" width="0.0436%" height="15" fill="rgb(246,89,9)" fg:x="11349" fg:w="5"/><text x="99.3160%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.10%)</title><rect x="99.1096%" y="261" width="0.0960%" height="15" fill="rgb(233,213,13)" fg:x="11354" fg:w="11"/><text x="99.3596%" y="271.50"></text></g><g><title>Squaring-The-Square`Squaring_The_Square::exhaustive::decompose (11,429 samples, 99.76%)</title><rect x="0.0611%" y="277" width="99.7643%" height="15" fill="rgb(233,141,41)" fg:x="7" fg:w="11429"/><text x="0.3111%" y="287.50">Squaring-The-Square`Squaring_The_Square::exhaustive::decompose</text></g><g><title>libsystem_platform.dylib`_platform_memmove (71 samples, 0.62%)</title><rect x="99.2057%" y="261" width="0.6198%" height="15" fill="rgb(239,167,4)" fg:x="11365" fg:w="71"/><text x="99.4557%" y="271.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.03%)</title><rect x="99.8254%" y="277" width="0.0349%" height="15" fill="rgb(209,217,16)" fg:x="11436" fg:w="4"/><text x="100.0754%" y="287.50"></text></g><g><title>Squaring-The-Square`alloc::raw_vec::finish_grow (4 samples, 0.03%)</title><rect x="99.8254%" y="261" width="0.0349%" height="15" fill="rgb(219,88,35)" fg:x="11436" fg:w="4"/><text x="100.0754%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.03%)</title><rect x="99.8341%" y="245" width="0.0262%" height="15" fill="rgb(220,193,23)" fg:x="11437" fg:w="3"/><text x="100.0841%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.02%)</title><rect x="99.8429%" y="229" width="0.0175%" height="15" fill="rgb(230,90,52)" fg:x="11438" fg:w="2"/><text x="100.0929%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="99.8603%" y="277" width="0.0175%" height="15" fill="rgb(252,106,19)" fg:x="11440" fg:w="2"/><text x="100.1103%" y="287.50"></text></g><g><title>Squaring-The-Square`Squaring_The_Square::exhaustive::decompose (11,451 samples, 99.96%)</title><rect x="0.0175%" y="293" width="99.9564%" height="15" fill="rgb(206,74,20)" fg:x="2" fg:w="11451"/><text x="0.2675%" y="303.50">Squaring-The-Square`Squaring_The_Square::exhaustive::decompose</text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.09%)</title><rect x="99.8865%" y="277" width="0.0873%" height="15" fill="rgb(230,138,44)" fg:x="11443" fg:w="10"/><text x="100.1365%" y="287.50"></text></g><g><title>Squaring-The-Square`Squaring_The_Square::exhaustive::decompose (11,454 samples, 99.98%)</title><rect x="0.0000%" y="309" width="99.9825%" height="15" fill="rgb(235,182,43)" fg:x="0" fg:w="11454"/><text x="0.2500%" y="319.50">Squaring-The-Square`Squaring_The_Square::exhaustive::decompose</text></g><g><title>Squaring-The-Square`std::sys_common::backtrace::__rust_begin_short_backtrace (11,455 samples, 99.99%)</title><rect x="0.0000%" y="373" width="99.9913%" height="15" fill="rgb(242,16,51)" fg:x="0" fg:w="11455"/><text x="0.2500%" y="383.50">Squaring-The-Square`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>Squaring-The-Square`Squaring_The_Square::main (11,455 samples, 99.99%)</title><rect x="0.0000%" y="357" width="99.9913%" height="15" fill="rgb(248,9,4)" fg:x="0" fg:w="11455"/><text x="0.2500%" y="367.50">Squaring-The-Square`Squaring_The_Square::main</text></g><g><title>Squaring-The-Square`Squaring_The_Square::exhaustive::decompose (11,455 samples, 99.99%)</title><rect x="0.0000%" y="341" width="99.9913%" height="15" fill="rgb(210,31,22)" fg:x="0" fg:w="11455"/><text x="0.2500%" y="351.50">Squaring-The-Square`Squaring_The_Square::exhaustive::decompose</text></g><g><title>Squaring-The-Square`Squaring_The_Square::exhaustive::decompose (11,455 samples, 99.99%)</title><rect x="0.0000%" y="325" width="99.9913%" height="15" fill="rgb(239,54,39)" fg:x="0" fg:w="11455"/><text x="0.2500%" y="335.50">Squaring-The-Square`Squaring_The_Square::exhaustive::decompose</text></g><g><title>all (11,456 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(230,99,41)" fg:x="0" fg:w="11456"/><text x="0.2500%" y="431.50"></text></g><g><title>dyld`start (11,456 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(253,106,12)" fg:x="0" fg:w="11456"/><text x="0.2500%" y="415.50">dyld`start</text></g><g><title>Squaring-The-Square`main (11,456 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(213,46,41)" fg:x="0" fg:w="11456"/><text x="0.2500%" y="399.50">Squaring-The-Square`main</text></g></svg></svg>